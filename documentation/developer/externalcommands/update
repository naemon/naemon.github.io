#!/usr/bin/perl

use warnings;
use strict;
use POSIX qw/mktime/;
use Data::Dumper;
use Carp;

#################################################
# settings
my $src_url  = 'https://raw.githubusercontent.com/naemon/naemon-core/master/src/naemon/commands.c';
my $src_file = 'commands.c';
my $max_age  = 3600;

#################################################
# update src file
_fetch_source($src_url, $src_file) if _update_required($src_file);

#################################################
die("download failed?") unless -e $src_file;
my $commands = parse_commands($src_file);

#################################################
# write out index file
`rm *.md`;
my $page     = _read_file('index.tpl');
open(my $fh, '>', 'index.md');
my($header, $footer) = split(/\Q{% content %}\E/, $page, 2);
print $fh $header,"\n";
for my $name (sort keys%{$commands}) {
    my $command = $commands->{$name};

    my $classes = {};
    if($command->{'args'} =~ m/hostgroup/mx) {
        $classes->{'hostgroup'} = 1;
    }
    elsif($command->{'args'} =~ m/host/mx) {
        $classes->{'host'} = 1;
    }
    if($command->{'args'} =~ m/servicegroup/mx) {
        $classes->{'servicegroup'} = 1;
    }
    elsif($command->{'args'} =~ m/service/mx) {
        $classes->{'service'} = 1;
    }
    if($command->{'args'} =~ m/contactgroup/mx) {
        $classes->{'contactgroup'} = 1;
    }
    elsif($command->{'args'} =~ m/contact/mx) {
        $classes->{'contact'} = 1;
    }
    if($command->{'name'} =~ m/downtime/mxi) {
        $classes->{'downtime'} = 1;
    }
    if($command->{'name'} =~ m/comment/mxi) {
        $classes->{'comment'} = 1;
    }
    if($command->{'name'} =~ m/notification/mxi) {
        $classes->{'notification'} = 1;
    }
    if(scalar keys %{$classes} == 0) {
        $classes->{'process'} = 1;
    }

    printf($fh "<h5 class='commands ".join(" ", sort keys %{$classes})."'><a href='".lc($name).".html'>".$command->{'name'}."</a></h5>\n");
}
print $fh $footer,"\n";
close($fh);
print "index.md written\n";

#################################################
# write out command files
$page = _read_file('command.tpl');
for my $name (sort keys%{$commands}) {
    open(my $fh, '>', lc($name).'.md');
    my $page = $page;
    $page =~ s|\Q{% cmd %}\E|$name|gmx;
    my($header, $footer) = split(/\Q{% content %}\E/, $page, 2);
    print $fh $header,"\n";
    my $command = $commands->{$name};

    my(@args_names, @args_examples);
    for my $arg (split(/;/mx, $command->{'args'})) {
        my($type,$key) = split(/=/mx,$arg);
        if($key eq 'service') {
            $key = 'service_description';
            push @args_names, 'host_name';
            push @args_examples, _get_example('host_name', $type, $name);
        }
        push @args_names, $key;
        push @args_examples, _get_example($key, $type, $name);
    }
    printf($fh "#### Command Format:\n\n`".$command->{'name'}.";".join(';', @args_names)."`\n\n");

    printf($fh "#### Description:\n\n"._escape($command->{'description'})."\n\n");

    printf($fh "#### Shell Script Usage Example:\n\n");
    printf($fh "```sh\n");
    printf($fh "#!/bin/sh\n");
    printf($fh "# This is a sample shell script showing how you can submit the $name command\n");
    printf($fh "# to Naemon. Adjust variables to fit your environment as necessary.\n\n");
    printf($fh 'printf "[%%lu] '.$name.';'.join(';', @args_examples).'\n" `date +%%s` > /var/lib/naemon/naemon.cmd'."\n");
    printf($fh "```\n\n");

    print $fh $footer,"\n";
    close($fh);
    print lc($name).".md written\n";
}

#################################################
# subs
sub _fetch_source {
    my($src_url, $src_file) = @_;
    print "fetching source code\n";
    print `wget -N $src_url`
}

#################################################
sub _update_required {
    my($src_file) = @_;
    return 1 unless -e $src_file;
    my @stats = stat($src_file);
    if($stats[9] < time() - $max_age) {
        return 1;
    }
    return 0;
}

#################################################
sub parse_commands {
    my($src_file) = @_;
    open(my $fh, '<', $src_file) or die("cannot open file $src_file: ".$!);
    my $commands = {};
    my $started  = 0;
    my $complete_line = "";
    my $last_command;
    while(my $line = <$fh>) {
        chomp($line);
        next unless ($started || $line =~ m/register_core_commands\s*\(/mx);
        $started  = 1;
        $started  = 0 if $line =~ m/^\s*\}$/mx;

        next if $line =~ m/^\s*$/mx;
        $complete_line = $complete_line.$line;
        if($line !~ m/;$/mx) {
            next;
        }
        if($complete_line =~ m/command_create\s*\(([^,]+),([^,]+),\s*"([^"]*)"\s*,([^,]+)\)/mx) {
            my($name, $handler, $description, $args) = ($1, $2, $3, $4);
            $name        = _strip($name);
            $description = _strip($description);
            $args        = _strip($args);
            if($args eq 'NULL') { $args = ""; }
            $commands->{$name} = {description => $description, args => $args, name => $name};
            $complete_line = "";
            $last_command = $commands->{$name};
            next;
        }
        if($complete_line =~ m/command_argument_add\s*\(([^,]+),([^,]+),([^,]+),([^,]+)/mx) {
            my $name = _strip($2);
            my $what = _strip($3);
            $last_command->{'args'} .= ';' if $last_command->{'args'} ne "";
            $last_command->{'args'} .= lc($what)."=".$name;
            $complete_line = "";
            next;
        }
        if($line =~ m/;$/mx) {
            $complete_line = "";
        }
    }
    close($fh);

    return $commands;
}

#################################################
sub _strip {
    my($str) = @_;
    $str =~ s/^\s+//gmx;
    $str =~ s/\s+$//gmx;
    $str =~ s/^"//gmx;
    $str =~ s/"$//gmx;
    return($str);
}

#################################################
sub _read_file {
    my($file) = @_;
    open(my $fh, '<', $file) or die("cannot read $file: $!");
    local $/ = undef;
    my $str = <$fh>;
    return($str);
}

#################################################
sub _escape {
    my($str) = @_;
    $str =~ s|<|&lt;|gmx;
    $str =~ s|>|&gt;|gmx;
    return($str);
}

#################################################
sub _get_example {
    my($key, $type, $cmd) = @_;
    if($key =~ /^(sticky|notify|persistent|fixed|delete)$/mx) {
        return("1");
    }
    if($key =~ /^(trigger_id|notification_number|status_code|options|value)/mx) {
        return("0");
    }
    if($key eq 'host_name' || $key eq 'hostname') {
        return("host1");
    }
    if($key eq 'service' || $key eq 'service_description') {
        return("service1");
    }
    if($key eq 'hostgroup_name' || $key eq 'hosgroup_name') {
        return("hostgroup1");
    }
    if($key eq 'servicegroup_name') {
        return("servicegroup1");
    }
    if($key eq 'contactgroup_name') {
        return("contactgroup1");
    }
    if($key eq 'author' || $key eq 'contact_name') {
        return("naemonadmin");
    }
    if($key eq 'comment') {
        return("This is an example comment.");
    }
    if($key eq 'timeperiod' || $key eq 'notification_timeperiod' || $key eq 'check_timeperiod') {
        return("24x7");
    }
    if($key eq 'duration') {
        return("3600");
    }
    if($key eq 'start_time' || $key eq 'check_time' || $key eq 'downtime_start_time') {
        return("1478648441");
    }
    if($key eq 'end_time' || $key eq 'downtime_end_time' || $key eq 'notification_time') {
        return("1478638441");
    }
    if($key eq 'plugin_output') {
        return("This is an example plugin output.");
    }
    if($key eq 'comment_id' || $key eq 'downtime_id') {
        return("1234");
    }
    if($key eq 'check_interval' || $key eq 'check_attempts') {
        return("10");
    }
    if($key eq 'event_handler_command') {
        return("restart_service");
    }
    if($key eq 'check_command') {
        return("check_ping");
    }
    if($key eq 'varname') {
        return("_SOMEVAR");
    }
    if($key eq 'varvalue') {
        return("some new value");
    }
    if($key eq 'file_name') {
        return("/tmp/even_mode_commands.txt");
    }
    print STDERR "unable to find an example for:\n";
    print STDERR Dumper([$cmd, $type, $key]);
    return("");
}
